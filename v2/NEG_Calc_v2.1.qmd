---
title: "Novel Exploration Grid (NEG) Analysis for EPM Data"
author: "Matt Zelko"
format: html
---

This document demonstrates how to use the NEG analysis package with custom configurations for different experimental setups.

```{r setup}
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(dbscan)  # Add this for the DBSCAN clustering
```

```{r}
# Source our custom functions
source(paste0(getwd(), "/config.R"))
source(paste0(getwd(), "/center_shift_correction.R"))  # Add this line
source(paste0(getwd(), "/data_processing.R"))
source(paste0(getwd(), "/spatial_analysis.R"))
```

## Configuring for Your Experiment

The NEG analysis package is designed to be flexible and accommodate different experimental setups. Here's how to customize it for your needs:

### 1. Basic Usage with Default Configuration

```{r basic_usage}
# Load a test file with default configuration
tryCatch({
  test_data <- read_and_clean_data(paste0(getwd(), "/v2.0/Test/Raw data-#1-Trial     1.xlsx"))
  print("Data loaded successfully!")
  glimpse(test_data)
}, error = function(e) {
  cat("Error loading data:\n")
  print(e)
})
```

```{r}
View(test_data$data[[1]])
ggplot(test_data$data[[1]]) +
  geom_point(aes(x = X, y = Y), color = "lightgrey") +
  geom_point(aes(x = x_m, y = y_m), color = "navyblue") +
  geom_point(aes(x = x_m, y = y_m), color = "navyblue") +
  theme_minimal()
```

### 2. Customizing Metadata Fields

If your experiment uses different metadata fields:

```{r custom_metadata}
# Create custom configuration
custom_config <- create_epm_config(
  metadata = list(
    fields = c("Rat ID", "Diet", "Strain", "Treatment"),
    start_row = 32,
    end_row = 35
  )
)

# Use custom configuration
# test_data <- read_and_clean_data("path/to/your/file.xlsx", custom_config)
```

### 3. Adjusting Zone Definitions

If your maze uses different zone naming:

```{r custom_zones}
custom_zones_config <- create_epm_config(
  zones = list(
    center = list(
      pattern = "In zone\\(centre_zone.*\\)",
      required = TRUE
    ),
    open_arms = list(
      pattern = "In zone\\(open_arm_[0-9].*\\)",
      required = TRUE,
      expected_count = 2
    ),
    closed_arms = list(
      pattern = "In zone\\(closed_arm_[0-9].*\\)",
      required = TRUE,
      expected_count = 2
    )
  )
)
```

### 4. Modifying Data Structure

If your Excel file has a different structure:

```{r custom_structure}
custom_structure_config <- create_epm_config(
  data_structure = list(
    header_row = 37,
    data_start_row = 39,
    required_columns = c(
      "Time",
      "X position",
      "Y position"
    )
  )
)
```

## Common Configuration Scenarios

Here are some common scenarios you might encounter:

1. Different metadata fields
2. Different zone naming conventions
3. Different Excel file structure
4. Different coordinate systems

For each scenario, you can create a custom configuration that matches your needs.

## Testing Your Configuration

It's recommended to test your configuration with a single file first:

```{r test_config}
# Create your custom configuration
my_config <- create_epm_config(
  metadata = list(
    fields = c("Rat ID", "Diet", "Strain", "Treatment")
  ),
  data_structure = list(
    header_row = 37,
    data_start_row = 39
  )
)

# Test with one file
test_result <- tryCatch({
  read_and_clean_data(paste0(getwd(), "/v2.0/Test/Raw data-#1-Trial     1.xlsx"), my_config)
}, error = function(e) {
  cat("Error:", e$message, "\n")
  NULL
})

# Check the result
if (!is.null(test_result)) {
  print("Configuration test successful!")
  glimpse(test_result)
}
```

# Grid creation
```{r}
# Create grids using 2 cm depth bands
complete_arm_grids <- create_complete_arm_grids(test_data$data[[1]])
```

## Plot grids
```{r}
# Plot showing grid bands for each arm type
ggplot() +
  # For open arms (vertical bands)
  geom_rect(data = complete_arm_grids$data[[1]], 
            aes(xmin = x_min, xmax = x_max,
                ymin = depth_start, ymax = depth_end),
            fill = "lightblue", color = "darkgrey", alpha = 0.3) +
  # For closed arms (horizontal bands)
  geom_rect(data = complete_arm_grids$data[[2]], 
            aes(xmin = depth_start, xmax = depth_end,
                ymin = y_min, ymax = y_max),
            fill = "lightgreen", color = "darkgrey", alpha = 0.3) +
  # Add points to show actual movement data
  geom_point(data = test_data$data[[1]] %>% filter(Inopen_arms == 1 | Inclosed_arms == 1), 
             aes(x = x_m, y = y_m, color = factor(Inopen_arms)), 
             alpha = 0.1, size = 0.5) +
  # Facet by grid type
  coord_equal() +
  scale_color_manual(values = c("red", "blue"), 
                    labels = c("Closed Arm", "Open Arm"),
                    name = "Location") +
  labs(title = "Grid Bands by Arm Type",
       x = "X Position (cm)",
       y = "Y Position (cm)") +
  theme_minimal()
```
